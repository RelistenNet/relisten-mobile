/* tslint:disable */
/* eslint-disable */
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    ShowWithSources,
    ShowWithSourcesFromJSON,
    ShowWithSourcesToJSON,
    Year,
    YearFromJSON,
    YearToJSON,
    YearWithShows,
    YearWithShowsFromJSON,
    YearWithShowsToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugYearsGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugYearsYearGetRequest {
    artistIdOrSlug: string;
    year: string;
}

export interface ApiV2ArtistsArtistIdOrSlugYearsYearShowDateGetRequest {
    artistIdOrSlug: string;
    year: string;
    showDate: string;
}

/**
 * 
 */
export class YearsApi extends runtime.BaseAPI {

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsGetRaw(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Year>>> {
        if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
            throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/artists/{artistIdOrSlug}/years`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(YearFromJSON));
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsGet(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsGetRequest, initOverrides?: RequestInit): Promise<Array<Year>> {
        const response = await this.apiV2ArtistsArtistIdOrSlugYearsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsYearGetRaw(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsYearGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<YearWithShows>> {
        if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
            throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsYearGet.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsYearGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/artists/{artistIdOrSlug}/years/{year}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => YearWithShowsFromJSON(jsonValue));
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsYearGet(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsYearGetRequest, initOverrides?: RequestInit): Promise<YearWithShows> {
        const response = await this.apiV2ArtistsArtistIdOrSlugYearsYearGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsYearShowDateGetRaw(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsYearShowDateGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShowWithSources>> {
        if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
            throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsYearShowDateGet.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsYearShowDateGet.');
        }

        if (requestParameters.showDate === null || requestParameters.showDate === undefined) {
            throw new runtime.RequiredError('showDate','Required parameter requestParameters.showDate was null or undefined when calling apiV2ArtistsArtistIdOrSlugYearsYearShowDateGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/artists/{artistIdOrSlug}/years/{year}/{showDate}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))).replace(`{${"showDate"}}`, encodeURIComponent(String(requestParameters.showDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowWithSourcesFromJSON(jsonValue));
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugYearsYearShowDateGet(requestParameters: ApiV2ArtistsArtistIdOrSlugYearsYearShowDateGetRequest, initOverrides?: RequestInit): Promise<ShowWithSources> {
        const response = await this.apiV2ArtistsArtistIdOrSlugYearsYearShowDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
