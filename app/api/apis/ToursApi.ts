// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    TourWithShowCount,
    TourWithShowCountFromJSON,
    TourWithShowCountToJSON,
    TourWithShows,
    TourWithShowsFromJSON,
    TourWithShowsToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugToursGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugToursIdAndSlugGetRequest {
    artistIdOrSlug: string;
    idAndSlug: string;
}


/**
 */
function apiV2ArtistsArtistIdOrSlugToursGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugToursGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<TourWithShowCount>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugToursGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/tours`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TourWithShowCountFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugToursGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugToursGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<TourWithShowCount>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugToursGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugToursIdAndSlugGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugToursIdAndSlugGetRequest, requestConfig: runtime.TypedQueryConfig<T, TourWithShows> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugToursIdAndSlugGet.');
    }

    if (requestParameters.idAndSlug === null || requestParameters.idAndSlug === undefined) {
        throw new runtime.RequiredError('idAndSlug','Required parameter requestParameters.idAndSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugToursIdAndSlugGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/tours/{idAndSlug}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"idAndSlug"}}`, encodeURIComponent(String(requestParameters.idAndSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TourWithShowsFromJSON(body), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugToursIdAndSlugGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugToursIdAndSlugGetRequest, requestConfig?: runtime.TypedQueryConfig<T, TourWithShows>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugToursIdAndSlugGetRaw(requestParameters, requestConfig);
}

