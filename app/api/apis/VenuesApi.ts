/* tslint:disable */
/* eslint-disable */
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    VenueWithShowCount,
    VenueWithShowCountFromJSON,
    VenueWithShowCountToJSON,
    VenueWithShows,
    VenueWithShowsFromJSON,
    VenueWithShowsToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugVenuesGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGetRequest {
    artistIdOrSlug: string;
    idAndSlug: string;
}

/**
 * 
 */
export class VenuesApi extends runtime.BaseAPI {

    /**
     */
    async apiV2ArtistsArtistIdOrSlugVenuesGetRaw(requestParameters: ApiV2ArtistsArtistIdOrSlugVenuesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VenueWithShowCount>>> {
        if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
            throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugVenuesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/artists/{artistIdOrSlug}/venues`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueWithShowCountFromJSON));
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugVenuesGet(requestParameters: ApiV2ArtistsArtistIdOrSlugVenuesGetRequest, initOverrides?: RequestInit): Promise<Array<VenueWithShowCount>> {
        const response = await this.apiV2ArtistsArtistIdOrSlugVenuesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGetRaw(requestParameters: ApiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VenueWithShows>> {
        if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
            throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGet.');
        }

        if (requestParameters.idAndSlug === null || requestParameters.idAndSlug === undefined) {
            throw new runtime.RequiredError('idAndSlug','Required parameter requestParameters.idAndSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/artists/{artistIdOrSlug}/venues/{idAndSlug}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"idAndSlug"}}`, encodeURIComponent(String(requestParameters.idAndSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueWithShowsFromJSON(jsonValue));
    }

    /**
     */
    async apiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGet(requestParameters: ApiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGetRequest, initOverrides?: RequestInit): Promise<VenueWithShows> {
        const response = await this.apiV2ArtistsArtistIdOrSlugVenuesIdAndSlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
