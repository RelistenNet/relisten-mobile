// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query';
import * as runtime from '../runtime';
import {
  Artist,
  ArtistFromJSON,
  ArtistToJSON,
  ArtistWithCounts,
  ArtistWithCountsFromJSON,
  ArtistWithCountsToJSON,
  BooleanResponseEnvelope,
  BooleanResponseEnvelopeFromJSON,
  BooleanResponseEnvelopeToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugGetRequest {
  artistIdOrSlug: string;
}

/**
 */
function apiV2ArtistsArtistIdOrSlugGetRaw<T>(
  requestParameters: ApiV2ArtistsArtistIdOrSlugGetRequest,
  requestConfig: runtime.TypedQueryConfig<T, Artist> = {},
): QueryConfig<T> {
  if (
    requestParameters.artistIdOrSlug === null ||
    requestParameters.artistIdOrSlug === undefined
  ) {
    throw new runtime.RequiredError(
      'artistIdOrSlug',
      'Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugGet.',
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const {meta = {}} = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}`.replace(
      `{${'artistIdOrSlug'}}`,
      encodeURIComponent(String(requestParameters.artistIdOrSlug)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const {transform: requestTransform} = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ArtistFromJSON(body), text);
  }

  return config;
}

/**
 */
export function apiV2ArtistsArtistIdOrSlugGet<T>(
  requestParameters: ApiV2ArtistsArtistIdOrSlugGetRequest,
  requestConfig?: runtime.TypedQueryConfig<T, Artist>,
): QueryConfig<T> {
  return apiV2ArtistsArtistIdOrSlugGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsGetRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<ArtistWithCounts>> = {},
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const {meta = {}} = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/v2/artists`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const {transform: requestTransform} = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(ArtistWithCountsFromJSON), text);
  } else {
    config.transform = (body, _text) => body.map(ArtistWithCountsFromJSON);
  }

  return config;
}

/**
 */
export function apiV2ArtistsGet<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<ArtistWithCounts>>,
): QueryConfig<T> {
  return apiV2ArtistsGetRaw(requestConfig);
}
