// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    SetlistSongWithPlayCount,
    SetlistSongWithPlayCountFromJSON,
    SetlistSongWithPlayCountToJSON,
    SetlistSongWithShows,
    SetlistSongWithShowsFromJSON,
    SetlistSongWithShowsToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugSongsGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugSongsIdAndSlugGetRequest {
    artistIdOrSlug: string;
    idAndSlug: string;
}


/**
 */
function apiV2ArtistsArtistIdOrSlugSongsGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSongsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<SetlistSongWithPlayCount>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugSongsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/songs`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SetlistSongWithPlayCountFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugSongsGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSongsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<SetlistSongWithPlayCount>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugSongsGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugSongsIdAndSlugGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSongsIdAndSlugGetRequest, requestConfig: runtime.TypedQueryConfig<T, SetlistSongWithShows> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugSongsIdAndSlugGet.');
    }

    if (requestParameters.idAndSlug === null || requestParameters.idAndSlug === undefined) {
        throw new runtime.RequiredError('idAndSlug','Required parameter requestParameters.idAndSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugSongsIdAndSlugGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/songs/{idAndSlug}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"idAndSlug"}}`, encodeURIComponent(String(requestParameters.idAndSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SetlistSongWithShowsFromJSON(body), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugSongsIdAndSlugGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSongsIdAndSlugGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SetlistSongWithShows>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugSongsIdAndSlugGetRaw(requestParameters, requestConfig);
}

