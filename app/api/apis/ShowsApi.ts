// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    Show,
    ShowFromJSON,
    ShowToJSON,
    ShowWithArtist,
    ShowWithArtistFromJSON,
    ShowWithArtistToJSON,
    ShowWithSources,
    ShowWithSourcesFromJSON,
    ShowWithSourcesToJSON,
    SourceReview,
    SourceReviewFromJSON,
    SourceReviewToJSON,
} from '../models';

export interface ApiV2ArtistsArtistIdOrSlugShowsOnDateGetRequest {
    artistIdOrSlug: string;
    month?: number;
    day?: number;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsRandomGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGetRequest {
    artistIdOrSlug: string;
    shows?: number;
    days?: number;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGetRequest {
    artistIdOrSlug: string;
    shows?: number;
    days?: number;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsShowDateGetRequest {
    artistIdOrSlug: string;
    showDate: string;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsTodayGetRequest {
    artistIdOrSlug: string;
}

export interface ApiV2ArtistsArtistIdOrSlugShowsTopGetRequest {
    artistIdOrSlug: string;
    limit?: number;
}

export interface ApiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGetRequest {
    artistIdOrSlug: string;
    sourceId: number;
}

export interface ApiV2ShowsOnDateGetRequest {
    month?: number;
    day?: number;
}

export interface ApiV2ShowsRecentlyPerformedGetRequest {
    artistIds?: Array<string>;
    shows?: number;
    days?: number;
}

export interface ApiV2ShowsRecentlyUpdatedGetRequest {
    artistIds?: Array<string>;
    shows?: number;
    days?: number;
}


/**
 */
function apiV2ArtistsArtistIdOrSlugShowsOnDateGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsOnDateGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsOnDateGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.month !== undefined) {
        queryParameters['month'] = requestParameters.month;
    }


    if (requestParameters.day !== undefined) {
        queryParameters['day'] = requestParameters.day;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/on-date`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsOnDateGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsOnDateGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsOnDateGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsRandomGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRandomGetRequest, requestConfig: runtime.TypedQueryConfig<T, ShowWithSources> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsRandomGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/random`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ShowWithSourcesFromJSON(body), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsRandomGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRandomGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ShowWithSources>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsRandomGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.shows !== undefined) {
        queryParameters['shows'] = requestParameters.shows;
    }


    if (requestParameters.days !== undefined) {
        queryParameters['days'] = requestParameters.days;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/recently-performed`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsRecentlyPerformedGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.shows !== undefined) {
        queryParameters['shows'] = requestParameters.shows;
    }


    if (requestParameters.days !== undefined) {
        queryParameters['days'] = requestParameters.days;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/recently-updated`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsRecentlyUpdatedGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsShowDateGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsShowDateGetRequest, requestConfig: runtime.TypedQueryConfig<T, ShowWithSources> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsShowDateGet.');
    }

    if (requestParameters.showDate === null || requestParameters.showDate === undefined) {
        throw new runtime.RequiredError('showDate','Required parameter requestParameters.showDate was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsShowDateGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/{showDate}`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"showDate"}}`, encodeURIComponent(String(requestParameters.showDate))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ShowWithSourcesFromJSON(body), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsShowDateGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsShowDateGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ShowWithSources>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsShowDateGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsTodayGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsTodayGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsTodayGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/today`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsTodayGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsTodayGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsTodayGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugShowsTopGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsTopGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Show>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugShowsTopGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/shows/top`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugShowsTopGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugShowsTopGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Show>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugShowsTopGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGetRaw<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<SourceReview>> = {}): QueryConfig<T> {
    if (requestParameters.artistIdOrSlug === null || requestParameters.artistIdOrSlug === undefined) {
        throw new runtime.RequiredError('artistIdOrSlug','Required parameter requestParameters.artistIdOrSlug was null or undefined when calling apiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGet.');
    }

    if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
        throw new runtime.RequiredError('sourceId','Required parameter requestParameters.sourceId was null or undefined when calling apiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/artists/{artistIdOrSlug}/sources/{sourceId}/reviews`.replace(`{${"artistIdOrSlug"}}`, encodeURIComponent(String(requestParameters.artistIdOrSlug))).replace(`{${"sourceId"}}`, encodeURIComponent(String(requestParameters.sourceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SourceReviewFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGet<T>(requestParameters: ApiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<SourceReview>>): QueryConfig<T> {
    return apiV2ArtistsArtistIdOrSlugSourcesSourceIdReviewsGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ShowsOnDateGetRaw<T>(requestParameters: ApiV2ShowsOnDateGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.month !== undefined) {
        queryParameters['month'] = requestParameters.month;
    }


    if (requestParameters.day !== undefined) {
        queryParameters['day'] = requestParameters.day;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/shows/on-date`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ShowsOnDateGet<T>(requestParameters: ApiV2ShowsOnDateGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ShowsOnDateGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ShowsRecentlyPerformedGetRaw<T>(requestParameters: ApiV2ShowsRecentlyPerformedGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.artistIds) {
        queryParameters['artistIds'] = requestParameters.artistIds;
    }


    if (requestParameters.shows !== undefined) {
        queryParameters['shows'] = requestParameters.shows;
    }


    if (requestParameters.days !== undefined) {
        queryParameters['days'] = requestParameters.days;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/shows/recently-performed`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ShowsRecentlyPerformedGet<T>(requestParameters: ApiV2ShowsRecentlyPerformedGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ShowsRecentlyPerformedGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ShowsRecentlyUpdatedGetRaw<T>(requestParameters: ApiV2ShowsRecentlyUpdatedGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.artistIds) {
        queryParameters['artistIds'] = requestParameters.artistIds;
    }


    if (requestParameters.shows !== undefined) {
        queryParameters['shows'] = requestParameters.shows;
    }


    if (requestParameters.days !== undefined) {
        queryParameters['days'] = requestParameters.days;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/shows/recently-updated`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ShowsRecentlyUpdatedGet<T>(requestParameters: ApiV2ShowsRecentlyUpdatedGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ShowsRecentlyUpdatedGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2ShowsTodayGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ShowWithArtist>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/shows/today`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShowWithArtistFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2ShowsTodayGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ShowWithArtist>>): QueryConfig<T> {
    return apiV2ShowsTodayGetRaw( requestConfig);
}

