/* tslint:disable */
/* eslint-disable */
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    SourceTrackPlay,
    SourceTrackPlayFromJSON,
    SourceTrackPlayToJSON,
    SourceTrackPlayResponseEnvelope,
    SourceTrackPlayResponseEnvelopeFromJSON,
    SourceTrackPlayResponseEnvelopeToJSON,
} from '../models';

export interface ApiV2LiveHistoryGetRequest {
    lastSeenId?: number;
    limit?: number;
}

export interface ApiV2LivePlayPostRequest {
    appType?: string;
    trackId?: number;
    trackUuid?: string;
    userUuid?: string;
}

/**
 * 
 */
export class LiveApi extends runtime.BaseAPI {

    /**
     */
    async apiV2LiveHistoryGetRaw(requestParameters: ApiV2LiveHistoryGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SourceTrackPlay>>> {
        const queryParameters: any = {};

        if (requestParameters.lastSeenId !== undefined) {
            queryParameters['lastSeenId'] = requestParameters.lastSeenId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/live/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SourceTrackPlayFromJSON));
    }

    /**
     */
    async apiV2LiveHistoryGet(requestParameters: ApiV2LiveHistoryGetRequest, initOverrides?: RequestInit): Promise<Array<SourceTrackPlay>> {
        const response = await this.apiV2LiveHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2LivePlayPostRaw(requestParameters: ApiV2LivePlayPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SourceTrackPlayResponseEnvelope>> {
        const queryParameters: any = {};

        if (requestParameters.appType !== undefined) {
            queryParameters['app_type'] = requestParameters.appType;
        }

        if (requestParameters.trackId !== undefined) {
            queryParameters['track_id'] = requestParameters.trackId;
        }

        if (requestParameters.trackUuid !== undefined) {
            queryParameters['track_uuid'] = requestParameters.trackUuid;
        }

        if (requestParameters.userUuid !== undefined) {
            queryParameters['user_uuid'] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/live/play`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceTrackPlayResponseEnvelopeFromJSON(jsonValue));
    }

    /**
     */
    async apiV2LivePlayPost(requestParameters: ApiV2LivePlayPostRequest, initOverrides?: RequestInit): Promise<SourceTrackPlayResponseEnvelope> {
        const response = await this.apiV2LivePlayPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
