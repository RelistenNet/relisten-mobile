// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BooleanResponseEnvelope,
    BooleanResponseEnvelopeFromJSON,
    BooleanResponseEnvelopeToJSON,
    SourceTrackPlay,
    SourceTrackPlayFromJSON,
    SourceTrackPlayToJSON,
    SourceTrackPlayResponseEnvelope,
    SourceTrackPlayResponseEnvelopeFromJSON,
    SourceTrackPlayResponseEnvelopeToJSON,
} from '../models';

export interface ApiV2LiveHistoryGetRequest {
    lastSeenId?: number;
    limit?: number;
}

export interface ApiV2LivePlayPostRequest {
    appType?: string;
    trackId?: number;
    trackUuid?: string;
    userUuid?: string;
}


/**
 */
function apiV2LiveHistoryGetRaw<T>(requestParameters: ApiV2LiveHistoryGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<SourceTrackPlay>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.lastSeenId !== undefined) {
        queryParameters['lastSeenId'] = requestParameters.lastSeenId;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/live/history`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SourceTrackPlayFromJSON), text);
    }

    return config;
}

/**
*/
export function apiV2LiveHistoryGet<T>(requestParameters: ApiV2LiveHistoryGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<SourceTrackPlay>>): QueryConfig<T> {
    return apiV2LiveHistoryGetRaw(requestParameters, requestConfig);
}

/**
 */
function apiV2LivePlayPostRaw<T>(requestParameters: ApiV2LivePlayPostRequest, requestConfig: runtime.TypedQueryConfig<T, SourceTrackPlayResponseEnvelope> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.appType !== undefined) {
        queryParameters['app_type'] = requestParameters.appType;
    }


    if (requestParameters.trackId !== undefined) {
        queryParameters['track_id'] = requestParameters.trackId;
    }


    if (requestParameters.trackUuid !== undefined) {
        queryParameters['track_uuid'] = requestParameters.trackUuid;
    }


    if (requestParameters.userUuid !== undefined) {
        queryParameters['user_uuid'] = requestParameters.userUuid;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/v2/live/play`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SourceTrackPlayResponseEnvelopeFromJSON(body), text);
    }

    return config;
}

/**
*/
export function apiV2LivePlayPost<T>(requestParameters: ApiV2LivePlayPostRequest, requestConfig?: runtime.TypedQueryConfig<T, SourceTrackPlayResponseEnvelope>): QueryConfig<T> {
    return apiV2LivePlayPostRaw(requestParameters, requestConfig);
}

