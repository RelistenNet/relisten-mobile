/* tslint:disable */
/* eslint-disable */
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Show,
    ShowFromJSON,
    ShowFromJSONTyped,
    ShowToJSON,
} from './';

/**
 * 
 * @export
 * @interface SetlistSongWithShows
 */
export interface SetlistSongWithShows {
    /**
     * 
     * @type {Array<Show>}
     * @memberof SetlistSongWithShows
     */
    shows: Array<Show> | null;
    /**
     * 
     * @type {number}
     * @memberof SetlistSongWithShows
     */
    artistId: number;
    /**
     * 
     * @type {string}
     * @memberof SetlistSongWithShows
     */
    name: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetlistSongWithShows
     */
    slug: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetlistSongWithShows
     */
    upstreamIdentifier: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetlistSongWithShows
     */
    readonly sortName: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetlistSongWithShows
     */
    uuid: string;
    /**
     * 
     * @type {number}
     * @memberof SetlistSongWithShows
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof SetlistSongWithShows
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SetlistSongWithShows
     */
    updatedAt: Date;
}

export function SetlistSongWithShowsFromJSON(json: any): SetlistSongWithShows {
    return SetlistSongWithShowsFromJSONTyped(json, false);
}

export function SetlistSongWithShowsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetlistSongWithShows {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shows': (json['shows'] === null ? null : (json['shows'] as Array<any>).map(ShowFromJSON)),
        'artistId': json['artist_id'],
        'name': json['name'],
        'slug': json['slug'],
        'upstreamIdentifier': json['upstream_identifier'],
        'sortName': json['sortName'],
        'uuid': json['uuid'],
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function SetlistSongWithShowsToJSON(value?: SetlistSongWithShows | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shows': (value.shows === null ? null : (value.shows as Array<any>).map(ShowToJSON)),
        'artist_id': value.artistId,
        'name': value.name,
        'slug': value.slug,
        'upstream_identifier': value.upstreamIdentifier,
        'uuid': value.uuid,
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'updated_at': (value.updatedAt.toISOString()),
    };
}


