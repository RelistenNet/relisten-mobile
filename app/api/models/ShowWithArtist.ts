// tslint:disable
/**
 * Relisten API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Artist,
    ArtistFromJSON,
    ArtistToJSON,
    Era,
    EraFromJSON,
    EraToJSON,
    Tour,
    TourFromJSON,
    TourToJSON,
    VenueWithShowCount,
    VenueWithShowCountFromJSON,
    VenueWithShowCountToJSON,
    Year,
    YearFromJSON,
    YearToJSON,
} from './';

/**
 * 
 * @export
 * @interface ShowWithArtist
 */
export interface ShowWithArtist  {
    /**
     * 
     * @type {Artist}
     * @memberof ShowWithArtist
     */
    artist: Artist;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    artistId: number;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    venueId?: number;
    /**
     * 
     * @type {VenueWithShowCount}
     * @memberof ShowWithArtist
     */
    venue?: VenueWithShowCount;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    tourId?: number;
    /**
     * 
     * @type {Tour}
     * @memberof ShowWithArtist
     */
    tour?: Tour;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    yearId?: number;
    /**
     * 
     * @type {Year}
     * @memberof ShowWithArtist
     */
    year?: Year;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    eraId?: number;
    /**
     * 
     * @type {Era}
     * @memberof ShowWithArtist
     */
    era?: Era;
    /**
     * 
     * @type {Date}
     * @memberof ShowWithArtist
     */
    date: Date;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    avgRating: number;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    avgDuration?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowWithArtist
     */
    displayDate: string;
    /**
     * 
     * @type {Date}
     * @memberof ShowWithArtist
     */
    mostRecentSourceUpdatedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof ShowWithArtist
     */
    hasSoundboardSource: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShowWithArtist
     */
    hasStreamableFlacSource: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    sourceCount: number;
    /**
     * 
     * @type {string}
     * @memberof ShowWithArtist
     */
    uuid: string;
    /**
     * 
     * @type {number}
     * @memberof ShowWithArtist
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof ShowWithArtist
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ShowWithArtist
     */
    updatedAt: Date;
}

export function ShowWithArtistFromJSON(json: any): ShowWithArtist {
    return {
        'artist': ArtistFromJSON(json['artist']),
        'artistId': json['artist_id'],
        'venueId': !exists(json, 'venue_id') ? undefined : json['venue_id'],
        'venue': !exists(json, 'venue') ? undefined : VenueWithShowCountFromJSON(json['venue']),
        'tourId': !exists(json, 'tour_id') ? undefined : json['tour_id'],
        'tour': !exists(json, 'tour') ? undefined : TourFromJSON(json['tour']),
        'yearId': !exists(json, 'year_id') ? undefined : json['year_id'],
        'year': !exists(json, 'year') ? undefined : YearFromJSON(json['year']),
        'eraId': !exists(json, 'era_id') ? undefined : json['era_id'],
        'era': !exists(json, 'era') ? undefined : EraFromJSON(json['era']),
        'date': new Date(json['date']),
        'avgRating': json['avg_rating'],
        'avgDuration': !exists(json, 'avg_duration') ? undefined : json['avg_duration'],
        'displayDate': json['display_date'],
        'mostRecentSourceUpdatedAt': new Date(json['most_recent_source_updated_at']),
        'hasSoundboardSource': json['has_soundboard_source'],
        'hasStreamableFlacSource': json['has_streamable_flac_source'],
        'sourceCount': json['source_count'],
        'uuid': json['uuid'],
        'id': json['id'],
        'createdAt': new Date(json['created_at']),
        'updatedAt': new Date(json['updated_at']),
    };
}

export function ShowWithArtistToJSON(value?: ShowWithArtist): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'artist': ArtistToJSON(value.artist),
        'artist_id': value.artistId,
        'venue_id': value.venueId,
        'venue': VenueWithShowCountToJSON(value.venue),
        'tour_id': value.tourId,
        'tour': TourToJSON(value.tour),
        'year_id': value.yearId,
        'year': YearToJSON(value.year),
        'era_id': value.eraId,
        'era': EraToJSON(value.era),
        'date': value.date.toISOString(),
        'avg_rating': value.avgRating,
        'avg_duration': value.avgDuration,
        'display_date': value.displayDate,
        'most_recent_source_updated_at': value.mostRecentSourceUpdatedAt.toISOString(),
        'has_soundboard_source': value.hasSoundboardSource,
        'has_streamable_flac_source': value.hasStreamableFlacSource,
        'source_count': value.sourceCount,
        'uuid': value.uuid,
        'id': value.id,
        'created_at': value.createdAt.toISOString(),
        'updated_at': value.updatedAt.toISOString(),
    };
}


